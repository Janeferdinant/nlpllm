<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>LearnSmart</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.2/p5.min.js"></script>
  <script src="https://unpkg.com/@huggingface/transformers@2.0.0/dist/transformers.min.js"></script>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      font-family: Arial, sans-serif;
      background-color: #e0f7fa;
      margin: 0;
      padding: 10px;
      min-height: 100vh;
    }
    canvas {
      border: 2px solid #333;
      background-color: #fff;
    }
    #welcome, #dashboard, #readingArea, #mathArea, #scoreDisplay, #status {
      max-width: 600px;
      text-align: center;
      margin: 10px;
    }
    #readingArea, #mathArea {
      background-color: #f0f4f8;
      padding: 10px;
      border-radius: 0.5rem;
    }
    h1 {
      font-size: 2rem;
      font-weight: 700;
      color: #1e40af;
      margin-top: 1rem;
    }
    p {
      font-size: 1.125rem;
      color: #4b5563;
    }
    #scoreDisplay {
      font-size: 1.25rem;
      font-weight: 600;
      color: #2563eb;
    }
    #status {
      font-size: 1rem;
      color: #4b5563;
    }
    button {
      padding: 0.5rem 1rem;
      border-radius: 0.5rem;
      color: #fff;
      margin: 0.5rem;
      cursor: pointer;
    }
    .mode-button {
      background-color: #3b82f6;
    }
    .mode-button:hover {
      background-color: #2563eb;
    }
    .action-button {
      background-color: #22c55e;
    }
    .action-button:hover {
      background-color: #16a34a;
    }
    .vocab-option {
      display: inline-block;
      padding: 0.5rem;
      margin: 0.5rem;
      background-color: #bfdbfe;
      border-radius: 0.25rem;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="welcome">
    <h1>LearnSmart</h1>
    <p>What do you like best?</p>
    <button onclick="setInterest('animals')">Animals</button>
    <button onclick="setInterest('space')">Space</button>
    <button onclick="setInterest('adventure')">Adventure</button>
  </div>
  <div id="dashboard" style="display: none;">
    <h1>LearnSmart</h1>
    <p>Choose a mode to learn!</p>
    <button class="mode-button" onclick="showReading()">Reading</button>
    <button class="mode-button" onclick="showMath()">Math</button>
  </div>
  <div id="scoreDisplay">Score: 0</div>
  <div id="status"></div>
  <div id="readingArea" style="display: none;"></div>
  <div id="mathArea" style="display: none;"></div>
  <canvas id="canvas"></canvas>
  <script>
    let score = 0;
    let level = 0;
    let interest = '';
    let pipeline = null;
    let passage = '';
    let animationState = { x: 0, y: 0, speed: 2 };
    const content = {
      animals: {
        passages: ['A little cat ran to a tree. A bird flew high. The cat wanted to play.'],
        questions: [{ q: 'What did the cat see?', options: ['A bird', 'A dog', 'A car'], correct: 'A bird' }],
        vocab: [{ word: 'ran', meaning: 'Moved fast' }],
        animation: drawCat
      },
      space: {
        passages: ['A rocket zoomed to the stars. It saw a bright moon.'],
        questions: [{ q: 'What did the rocket see?', options: ['A moon', 'A sun', 'A cloud'], correct: 'A moon' }],
        vocab: [{ word: 'zoomed', meaning: 'Went very fast' }],
        animation: drawRocket
      },
      adventure: {
        passages: ['Sam found a map in a cave. It led to treasure.'],
        questions: [{ q: 'What did Sam find?', options: ['A map', 'A book', 'A toy'], correct: 'A map' }],
        vocab: [{ word: 'treasure', meaning: 'Valuable things' }],
        animation: drawTreasure
      }
    };

    // Initialize p5.js and LLM
    function setup() {
      let canvas = createCanvas(600, 400);
      canvas.parent('canvas');
      textAlign(LEFT, TOP);
      textSize(16);
      background(255);
      loadProgress();
      initLLM();
      if (localStorage.getItem('interest')) {
        interest = localStorage.getItem('interest');
        showDashboard();
      }
    }

    function draw() {
      background(255);
      if (interest && content[interest] && content[interest].animation) {
        content[interest].animation();
      }
    }

    // Animation functions
    function drawCat() {
      animationState.x += animationState.speed;
      if (animationState.x > width || animationState.x < 0) animationState.speed *= -1;
      fill(255, 165, 0);
      ellipse(animationState.x, height / 2, 50, 50);
      fill(0);
      triangle(animationState.x - 20, height / 2 - 25, animationState.x - 30, height / 2 - 40, animationState.x - 10, height / 2 - 25);
      triangle(animationState.x + 20, height / 2 - 25, animationState.x + 30, height / 2 - 40, animationState.x + 10, height / 2 - 25);
    }

    function drawRocket() {
      animationState.y -= animationState.speed;
      if (animationState.y < 0 || animationState.y > height) animationState.speed *= -1;
      fill(169, 169, 169);
      rect(width / 2, animationState.y, 20, 40);
      fill(255, 0, 0);
      triangle(width / 2, animationState.y + 40, width / 2 + 10, animationState.y + 60, width / 2 + 20, animationState.y + 40);
    }

    function drawTreasure() {
      fill(255, 215, 0);
      rect(width / 2 - 30, height / 2 - 20, 60, 40);
      fill(0);
      ellipse(width / 2, height / 2, 10, 10);
    }

    // Initialize LLM
    async function initLLM() {
      try {
        pipeline = await transformers.pipeline('text-generation', 'distilgpt2');
        document.getElementById('status').innerText = 'Ready to learn!';
        generateNewContent();
      } catch (error) {
        document.getElementById('status').innerText = 'Error loading LLM: ' + error.message;
      }
    }

    // Generate new content
    async function generateNewContent() {
      if (!pipeline || !interest) return;
      const prompt = `Write a short story for kids (50 words) about a ${interest} adventure: `;
      const newPassage = await generateText(prompt, 100);
      content[interest].passages.push(newPassage.slice(0, 100));
      content[interest].questions.push({
        q: 'What is the story about?',
        options: ['An adventure', 'A school day', 'A party'],
        correct: 'An adventure'
      });
      const words = newPassage.split(' ');
      const keyword = words[Math.floor(Math.random() * words.length)] || 'fun';
      content[interest].vocab.push({ word: keyword, meaning: 'Something enjoyable' });
    }

    async function generateText(prompt, maxLength) {
      if (!pipeline) return 'LLM not loaded.';
      try {
        const result = await pipeline(prompt, { max_length: maxLength, num_return_sequences: 1 });
        return result[0].generated_text.trim();
      } catch (error) {
        return 'Error: ' + error.message;
      }
    }

    // UI navigation
    window.setInterest = function(newInterest) {
      interest = newInterest;
      localStorage.setItem('interest', interest);
      showDashboard();
    };

    function showDashboard() {
      document.getElementById('welcome').style.display = 'none';
      document.getElementById('dashboard').style.display = 'block';
      document.getElementById('readingArea').style.display = 'none';
      document.getElementById('mathArea').style.display = 'none';
    }

    window.showReading = function() {
      document.getElementById('dashboard').style.display = 'none';
      document.getElementById('readingArea').style.display = 'block';
      displayReading();
    };

    window.showMath = function() {
      document.getElementById('dashboard').style.display = 'none';
      document.getElementById('mathArea').style.display = 'block';
      displayMath();
    };

    // Reading mode
    function displayReading() {
      if (!content[interest]) return;
      const passageIndex = level % content[interest].passages.length;
      passage = content[interest].passages[passageIndex];
      const question = content[interest].questions[passageIndex];
      const vocabPair = content[interest].vocab[passageIndex];
      document.getElementById('readingArea').innerHTML = `
        <p><strong>Question:</strong> ${question.q}</p>
        ${question.options.map(opt => `<button class="action-button" onclick="checkReadingAnswer('${opt}', '${question.correct}')">${opt}</button>`).join('')}
        <p><strong>Match the word:</strong> ${vocabPair.word}</p>
        <div class="vocab-option" onclick="checkVocab('${vocabPair.meaning}', '${vocabPair.meaning}')">${vocabPair.meaning}</div>
        <div class="vocab-option" onclick="checkVocab('Wrong meaning', '${vocabPair.meaning}')">Wrong meaning</div>
      `;
      document.getElementById('status').innerText = 'Read the story on the screen, answer the question, and match the word!';
    }

    window.checkReadingAnswer = function(answer, correct) {
      if (answer === correct) {
        score += 5;
        document.getElementById('status').innerText = 'Correct! Great job!';
        speak('Great job!');
      } else {
        document.getElementById('status').innerText = 'Try again!';
      }
      document.getElementById('scoreDisplay').innerText = 'Score: ' + score;
      saveProgress();
    };

    window.checkVocab = function(selected, correct) {
      if (selected === correct) {
        score += 3;
        document.getElementById('status').innerText = 'Word matched! Awesome!';
        speak('Awesome!');
        level++;
        displayReading();
      } else {
        document.getElementById('status').innerText = 'Wrong match. Try again!';
      }
      document.getElementById('scoreDisplay').innerText = 'Score: ' + score;
      saveProgress();
    };

    // Math mode
    const mathProblems = [
      { q: '2 + 3 = ?', options: ['5', '6', '4'], correct: '5', animation: drawApples },
      { q: '5 - 2 = ?', options: ['3', '2', '4'], correct: '3', animation: drawApples }
    ];

    function displayMath() {
      const problemIndex = level % mathProblems.length;
      const problem = mathProblems[problemIndex];
      content[interest].animation = problem.animation;
      document.getElementById('mathArea').innerHTML = `
        <p><strong>Problem:</strong> ${problem.q}</p>
        ${problem.options.map(opt => `<button class="action-button" onclick="checkMathAnswer('${opt}', '${problem.correct}')">${opt}</button>`).join('')}
      `;
      document.getElementById('status').innerText = 'Solve the math problem and watch the animation!';
    }

    function drawApples() {
      fill(255, 0, 0);
      for (let i = 0; i < 5; i++) {
        ellipse(100 + i * 60, height / 2 + sin(frameCount * 0.05 + i) * 20, 40, 40);
      }
    }

    window.checkMathAnswer = function(answer, correct) {
      if (answer === correct) {
        score += 5;
        document.getElementById('status').innerText = 'Correct! You’re a math star!';
        speak('You’re a math star!');
        level++;
        displayMath();
      } else {
        document.getElementById('status').innerText = 'Try again!';
      }
      document.getElementById('scoreDisplay').innerText = 'Score: ' + score;
      saveProgress();
    };

    // Speech feedback
    function speak(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'en-US';
      speechSynthesis.speak(utterance);
    }

    // Progress management
    function saveProgress() {
      localStorage.setItem('learnSmartScore', score);
      localStorage.setItem('learnSmartLevel', level);
    }

    function loadProgress() {
      score = parseInt(localStorage.getItem('learnSmartScore')) || 0;
      level = parseInt(localStorage.getItem('learnSmartLevel')) || 0;
      document.getElementById('scoreDisplay').innerText = 'Score: ' + score;
    }
  </script>
</body>
</html>
